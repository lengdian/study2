java.io中，最为核心的概念是流（stream），面向流的编程。Java中，一个流要么是输入流，要么是输出流，不可能既是输入流又是输出流。

java.nio中，拥有三个核心概念：Selector、Channel与Buffer。在java.nio中，我们是面向块（block）或是缓冲区（buffer）编程的。
    Buffer:
        Buffer本身就是一块内存，底层实现上，它实际上是个数组。
        数据的读、写都是通过Buffer实现的。
        除了数组之外，Buffer还提供了对于数据的结构化访问，并且可以追踪到系统的读写过程。
        java中的7种原生数据类型都有各自对应的Buffer类型，如：IntBuffer、LongBuffer,但是没有BooleanBuffer类型。
        所有数据的读写都是通过Buffer进行的，永远不会出现直接向Channel写入数据或是直接从Channel读取数据的情况。

    Channel：
        指的是可以向其写入数据或者从中读取数据的对象，它类似于java.io中的stream。
        与stream不同的是，Channel是双向的。一个流只可能是InputStream或是OutputStream，Channel打开后则可以进行读写两种操作。
        由于Channel是双向的，因此它能更好的反映出底层操作系统的真实情况，例如在linux系统中，底层操作系统的通道就是双向的。


关于NIO Buffer中的3个重要状态属性的含义：position、limit、capacity


